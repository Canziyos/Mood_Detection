# Analyze fusion, audio-only, and image-only results.
# Prints classification reports and plots/exports confusion matrices.
# NOTE: Uncomment the correct line for the results file you want to analyze.

import os
import pandas as pd
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Set output directory.
out_dir = "../results"
os.makedirs(out_dir, exist_ok=True)

# Set the fusion mode to match CSV file generated by runing test_separate_data or test_synch_data.
fusion_mode = "latent"  # "avg", "prod", "gate", etc.

df = pd.read_csv(f'../results/unsync_fusion_results_{fusion_mode}.csv')

# When runing the pipeline in test_synch_data.
# df = pd.read_csv(f'../results/sync_fusion_results_{fusion_mode}.csv')


y_true = df['class']
y_pred_fusion = df['fusion_pred']
y_pred_audio = df['audio_pred']
y_pred_image = df['image_pred']

# Compute metrics.
fusion_acc = accuracy_score(y_true, y_pred_fusion)
audio_acc = accuracy_score(y_true, y_pred_audio)
image_acc = accuracy_score(y_true, y_pred_image)

fusion_r = classification_report(y_true, y_pred_fusion)
audio_r = classification_report(y_true, y_pred_audio)
image_r = classification_report(y_true, y_pred_image)

# Save metrics to a TXT file (with mode in name).
metrics_txt = f"""
Fusion acc: {fusion_acc:.4f}
Audio-only acc: {audio_acc:.4f}
Image-only acc: {image_acc:.4f}

--- Fusion ---
{fusion_r}

--- Audio-only ---
{audio_r}

--- Image-only ---
{image_r}
"""
metrics_path = f"{out_dir}/metrics_report_{fusion_mode}.txt"
with open(metrics_path, 'w') as f:
    f.write(metrics_txt)

print(metrics_txt)  # Also print to console.

# Plot and save confusion matrices.
class_names = ["Angry", "Disgust", "Fear", "Happy", "Neutral", "Sad"]
cm = confusion_matrix(y_true, y_pred_fusion, labels=class_names)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=class_names, yticklabels=class_names)
plt.title(f"Confusion Matrix (Fusion: {fusion_mode})")
plt.ylabel('True')
plt.xlabel('Predicted')
plt.tight_layout()
plt.savefig(f"{out_dir}/cm_fusion_{fusion_mode}.png")
plt.show()

cm_norm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
plt.figure(figsize=(8, 6))
sns.heatmap(cm_norm, annot=True, fmt='.2f', cmap='Blues',
            xticklabels=class_names, yticklabels=class_names)
plt.title(f"Normalized Confusion Matrix (Fusion: {fusion_mode})")
plt.ylabel('True')
plt.xlabel('Predicted')
plt.tight_layout()
plt.savefig(f"{out_dir}/cm_fusion_normalized_{fusion_mode}.png")
plt.show()
